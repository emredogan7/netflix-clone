{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerURL","setTrailerURL","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","console","warn","log","movieTrailer","original_title","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","TMDB_API_KEY","process","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8TAMeA,E,OAJEC,EAAMC,OAAO,CAC1BC,QAAS,iC,wCCuEEC,MAlEf,YAA+C,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WAC9B,EAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAsCA,OAlCAC,qBAAU,WAAM,4CAGd,4BAAAC,EAAA,sEACwBb,EAAMc,IAAIT,GADlC,cACQU,EADR,OAEEN,EAAUM,EAAQC,KAAKC,SAFzB,kBAGSF,GAHT,4CAHc,0DAQdG,KACC,CAACb,IA0BF,sBAAKc,UAAU,MAAf,UACE,mCAAMf,EAAN,OACA,qBAAKe,UAAU,eAAf,SAEGX,EAAOY,KAAI,SAACC,GAAD,OACV,qBAEEC,QAAS,kBAvBC,SAACD,GACnBE,QAAQC,KAAKH,GACTX,EACFC,EAAc,KAEdY,QAAQE,IAAIJ,GACZK,KAAkB,OAALL,QAAK,IAALA,OAAA,EAAAA,EAAOM,kBAAP,OAAyBN,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAOO,OAAQ,IAClDC,MAAK,SAACC,GAEL,IAAMC,EAAY,IAAIC,gBAAgB,IAAIC,IAAIH,GAAKI,QACnDvB,EAAcoB,EAAUjB,IAAI,SAE7BqB,OAAM,SAACC,GAAD,OAAWb,QAAQE,IAAIW,OAWXC,CAAYhB,IAC3BF,UAAS,sBAAiBb,GAAc,oBACxCgC,IAAG,UApDI,wCAoDJ,OACDhC,EAAae,EAAMkB,YAAclB,EAAMmB,eAEzCC,IAAKpB,EAAMO,MANNP,EAAMqB,SAWhBhC,GAAc,cAAC,IAAD,CAASiC,QAASjC,EAAYkC,KAtC1B,CACrBC,OAAQ,MACRC,MAAO,cC9BLC,EAAeC,iJAAYD,aAalBE,EAXE,CACfC,cAAc,8BAAD,OAAgCH,EAAhC,mBACbI,sBAAsB,wBAAD,OAA0BJ,EAA1B,sBACrBK,cAAc,4BAAD,OAA8BL,EAA9B,mBACbM,kBAAkB,2BAAD,OAA6BN,EAA7B,mBACjBO,kBAAkB,2BAAD,OAA6BP,EAA7B,mBACjBQ,kBAAkB,2BAAD,OAA6BR,EAA7B,mBACjBS,mBAAmB,2BAAD,OAA6BT,EAA7B,YAClBU,mBAAmB,2BAAD,OAA6BV,EAA7B,oB,MCwCLW,MA7Cf,WACE,IAYkBC,EAAKC,EAZvB,EAA0BrD,mBAAS,IAAnC,mBAAOc,EAAP,KAAcwC,EAAd,KAgBA,OAdAjD,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sEACwBb,EAAMc,IAAImC,EAASE,uBAD3C,cACQpC,EADR,OAEMP,EAASO,EAAQC,KAAKC,QAC1B4C,EAASrD,EAAOsD,KAAKC,MAAMD,KAAKE,SAAWxD,EAAOyD,UAHpD,kBAISlD,GAJT,4CADc,uBAAC,WAAD,wBAOdG,KACC,IAOD,yBACEC,UAAU,SACV+C,MAAO,CACLC,gBAAgB,0DAAD,cAC4B9C,QAD5B,IAC4BA,OAD5B,EAC4BA,EAAOmB,cADnC,gBAGf4B,mBAAoB,iBANxB,UASE,sBAAKjD,UAAU,mBAAf,UACE,oBAAIA,UAAU,gBAAd,UACQ,OAALE,QAAK,IAALA,OAAA,EAAAA,EAAOjB,SAAP,OAAgBiB,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAOO,QAAvB,OAA+BP,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAOgD,iBAEzC,sBAAKlD,UAAU,kBAAf,UACE,wBAAQA,UAAU,iBAAlB,kBACA,wBAAQA,UAAU,iBAAlB,wBAGF,oBAAIA,UAAU,sBAAd,UAvBYwC,EAwBD,OAACtC,QAAD,IAACA,OAAD,EAACA,EAAOiD,SAxBFV,EAwBY,KAvBvB,OAAHD,QAAG,IAAHA,OAAA,EAAAA,EAAKM,QAASL,EAAID,EAAIY,OAAO,EAAGX,EAAI,GAAK,MAAQD,QA0BtD,qBAAKxC,UAAU,2B,MCdNqD,MA5Bf,WACE,MAA2BjE,oBAAS,GAApC,mBAAOkE,EAAP,KAAaC,EAAb,KAWA,OAVA9D,qBAAU,WAMR,OALA+D,OAAOC,iBAAiB,UAAU,WAC5BD,OAAOE,QAAU,IACnBH,GAAW,GACNA,GAAW,MAEb,WACLC,OAAOG,oBAAoB,aAE5B,IAED,sBAAK3D,UAAS,cAASsD,GAAQ,cAA/B,UACE,qBACEtD,UAAU,YACVmB,IAAI,mHACJG,IAAI,iBAEN,qBACEtB,UAAU,cACVmB,IAAI,yEACJG,IAAI,oBCOGsC,MAzBf,WACE,OACE,sBAAK5D,UAAU,MAAf,UAEE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,CACEf,MAAM,oBACNC,SAAU4C,EAASE,sBACnB7C,YAAU,IAEZ,cAAC,EAAD,CAAKF,MAAM,eAAeC,SAAU4C,EAASC,gBAC7C,cAAC,EAAD,CAAK9C,MAAM,YAAYC,SAAU4C,EAASG,gBAC1C,cAAC,EAAD,CAAKhD,MAAM,gBAAgBC,SAAU4C,EAASI,oBAC9C,cAAC,EAAD,CAAKjD,MAAM,gBAAgBC,SAAU4C,EAASK,oBAC9C,cAAC,EAAD,CAAKlD,MAAM,gBAAgBC,SAAU4C,EAASM,oBAC9C,cAAC,EAAD,CAAKnD,MAAM,iBAAiBC,SAAU4C,EAASO,qBAC/C,cAAC,EAAD,CACEpD,MAAM,uBACNC,SAAU4C,EAASQ,yBCdZuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrD,MAAK,YAAkD,IAA/CsD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.32b1577c.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport default instance;\n// there might be only one default export in one file.\n// instance.get('/foo-bar) \n// ==> https://api.themoviedb.org/3/foo-bar\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport Youtube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\nconst imgBaseUrl = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerURL, setTrailerURL] = useState(\"\");\n\n  // when this component loads, do some stuff, run sth.\n  // for our case, fetch api!\n  useEffect(() => {\n    // [], run once when the row loads. don't run again\n    // if [movies], it will be run each time movies changes.\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n  // why [fetchUrl] => dependency.\n  // everytime this changes, we need to update useEffect()\n\n  // console.log(movies);\n  const youtubeOptions = {\n    height: \"300\",\n    width: \"100%\",\n  };\n\n  const handleClick = (movie) => {\n    console.warn(movie);\n    if (trailerURL) {\n      setTrailerURL(\"\");\n    } else {\n      console.log(movie);\n      movieTrailer(movie?.original_title || movie?.name || \"\")\n        .then((url) => {\n          // console.log(url);\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerURL(urlParams.get(\"v\"));\n        })\n        .catch((error) => console.log(error));\n    }\n  };\n  return (\n    <div className=\"row\">\n      <h2> {title} </h2>\n      <div className=\"row__posters\">\n        {/* many film posters here! */}\n        {movies.map((movie) => (\n          <img\n            key={movie.id}\n            onClick={() => handleClick(movie)}\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n            src={`${imgBaseUrl}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n          ></img>\n        ))}\n      </div>\n      {/* <Youtube videoId={\"ADQFNBZwEPo\"} opts={youtubeOptions} /> */}\n      {trailerURL && <Youtube videoId={trailerURL} opts={youtubeOptions} />}\n\n      {/* title */}\n      {/* posters of movies */}\n    </div>\n  );\n}\n\nexport default Row;\n","const TMDB_API_KEY = process.env.TMDB_API_KEY;\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${TMDB_API_KEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${TMDB_API_KEY}&with_networks=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${TMDB_API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${TMDB_API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${TMDB_API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${TMDB_API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${TMDB_API_KEY}& =10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${TMDB_API_KEY}&with_genres=99`,\n};\n\nexport default requests;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport requests from \"./requests\";\nimport \"./Banner.css\";\n\nfunction Banner() {\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(requests.fetchNetflixOriginals);\n      var movies = request.data.results;\n      setMovie(movies[Math.floor(Math.random() * movies.length)]);\n      return request;\n    }\n    fetchData();\n  }, []);\n\n  function truncate(str, n) {\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n  }\n\n  return (\n    <header\n      className=\"banner\"\n      style={{\n        backgroundImage: `url(\n            \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\n        )`,\n        backgroundPosition: \"center center\",\n      }}\n    >\n      <div className=\"banner__contents\">\n        <h1 className=\"banner__title\">\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n        <div className=\"banner__buttons\">\n          <button className=\"banner__button\">Play</button>\n          <button className=\"banner__button\">My list</button>\n        </div>\n\n        <h1 className=\"banner__description\">\n          {truncate(movie?.overview, 250)}\n        </h1>\n      </div>\n      <div className=\"banner__fadeBottom\"></div>\n    </header>\n  );\n}\n\nexport default Banner;\n","import React, { useEffect, useState } from \"react\";\nimport \"./Nav.css\";\n\nfunction Nav() {\n  const [show, handleShow] = useState(false);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      if (window.scrollY > 100) {\n        handleShow(true);\n      } else handleShow(false);\n    });\n    return () => {\n      window.removeEventListener(\"scroll\");\n    };\n  }, []);\n  return (\n    <div className={`nav ${show && \"nav__black\"}`}>\n      <img\n        className=\"nav__logo\"\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1920px-Netflix_2015_logo.svg.png\"\n        alt=\"Netflix logo\"\n      />\n      <img\n        className=\"nav__avatar\"\n        src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\n        alt=\"User avatar\"\n      />\n    </div>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\nimport requests from \"./requests\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      {/* Nav */}\n      <Nav />\n      <Banner />\n      <Row\n        title=\"Netflix Originals\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row\n        title=\"Documentaries Movies\"\n        fetchUrl={requests.fetchDocumentaries}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}